Design considerations

The Dj Turntable is an application that integrates Qt Quick UI, Game Enabler (GE) audio engine and Qt Mobility features such as accelerometer sensor and profile reading. 
Initialization

All of the initialization is done in the main function: the orientation locking to landscape (only in Symbian), creating the QDeclarativeView to interpret QML, creating the Turntable and DrumMachine C++ objects and creating the Qt Mobility objects. The root QML element, TurnTable.qml, is retrieved from QDeclarativeView and stored as a QObject pointer to later make Qt Signals and Slots connections. Also the DrumMachine.qml element is retrieved via a recursive search from the QML element tree with object name "drumMachine". This way, both the Turntable.qml and the DrumMachine.qml can have C++ object equivalents and the code is much cleaner as the root element TurnTable.qml does not have to provide interface functions for the DrumMachine.qml. 

See more details about searching the QML element by objectName property from Forum Nokia code snippet:
 http://wiki.forum.nokia.com/index.php/Using_objectName_to_find_QML_elements_from_Qt 
Turntable

The turntable is implemented using a Timer element which rotates a disk (Image element) 60 times in a second by using the currentSpeed property of the disk. The currentSpeed property follows the targetSpeed property which gives us the acceleration effect. For example, when the turntable is started the currentSpeed is zero and the targetSpeed is set to 1.0. The changes to the currentSpeed property value are signaled to the Qt side of the code and the frequency of the audio sample is then changed accordingly. 

A MouseArea element, anchored as the size of the disc, is used to detect user input to the disc. When the mouse is pressed on the disk the timer is stopped. The movement of the mouse on the disc is calculated and the disc is then rotated by the resolved angle. Also by calculating the angle speed of the rotation, the currentSpeed value can be set. When the disc is "scratched" another signal, diskAimSpeed, is used. It tells the audio engine to alter the frequency of the sample with a smoothing. 

See more details about implementing a spinnable disc with user interaction from Forum Nokia code snippet:
 http://wiki.forum.nokia.com/index.php/Creating_a_spinnable_disc_with_QML 
View transitions

The view change transitions between Turntable, Drum machine and Info screen were implemented by placing all the UI controls on a Flickable element that is set to non-interactive mode. By changing the Flickable's contentY property the view could then be changed when the side panel buttons or the info screen button are pressed. 

See more details about using Flickable in non-interactive mode from Forum Nokia code snippet:
 http://wiki.forum.nokia.com/index.php/Using_Flickable_to_implement_a_view_change_animation 
Drum machine

The Drum machine is basically a grid filled with 32 (ticks) x 6 (samples) DrumButton elements. The grid is placed in a non-interactive Flickable element to divide the grid into two horizontal views. Each DrumButton knows its tick and sample so when pressed they will signal their current state to the C++ DrumMachine object. If the drum sequence is user-defined, it is saved into the platform-specific storage by using Qt class QSettings. When the beat of the BeatSelector is changed the signal setBeat is emitted and it is handled in C++ DrumMachine object. It will then read the corresponding beat via QSettings and signal the state of each DrumButton with signal drumButtonState. 

When the drum machine is powered on, the C++ DrumMachine object will periodically emit signals about the progress of the beat. This is visualized in the UI by moving the highlight (narrow Rectangle element) on top of the drum buttons and changing between the two views to show the right tick range. 
Scaling

The UI of the application is implemented to scale to the resolution. This is required because the application is targeted to Symbian and Maemo devices, whose resolutions are 640 x 360 and 800 x 480, respectively. Also to support desktop targets, where the resolution of the application can be almost anything, a scalable UI seemed to be the only choice. The scalability is implemented mostly by using percentage values instead of constant values. In some cases Math.min(x, y) is used to find out the minimum value of the width and height and scale other values according to this value. 
Playing audio

The TurnTable C++ object is the master mixer of the application in addition to being the audio source of the turntable sample. The DrumMachine C++ object handles the playing and mixing of drum samples. The drum machine audio is output to the TurnTable object which will mix the drum samples with the turntable sample. Finally the audio is outputted to the audio device via GE::AudioOut. 
Qt classes and QML elements used

Qt / C++ classes: 
QDeclarativeView - used to interpret QML files 
QGLWidget - used to draw QDeclarativeView with Qt OpenGL 
QPointer - relaxes the use of pointers 
QSettings - used to store and retrieve user defined beats to / from permanent storage 
QMessageBox - used to report serious errors 
QVariant - used as parameters in Qt Signals and Slots between Qt and QML 
QDesktopServices - used to launch web browser from Info screen's hyper links 
QVector - used to store beat sequences in memory 
std::vector - used to convert predefined beats stored as byte arrays to QVectors 

Qt Mobility classes: 
QAccelerometer - gets the inclination of the mobile device 
QAccelerometerFilter - used to filter values of QAccelerometer to save CPU cycles 
QSystemDeviceInfo - used to detect the profile of the device, eg. when the mobile is on silent no audio is played 
(QAudioOutput) - used to access audio device in mobile targets 

Qt classes used in GE audio engine: 
(QAudioOutput) - used to access audio device in desktop targets 
QThread - used implement audio functionality in worker thread 
QIODevice - used to handle audio buffers 
QMutex - used to synchronize critical sections between worker thread and GUI thread 
QFile - used to read WAV-files 

Symbian specific classes: 
MRemConCoreApiTargetObserver, CRemConInterfaceSelector, CRemConCoreApiTarget - used to handle volume up / down HW keys on Symbian devices 
CMMFDevSound - used to set the master volume in Symbian devies, involves a nasty hack 

QML elements: 
Item, Row, Column, Grid - used to group and position child elements 
Text - obviously used to show texts, eg. the labels in turn table and drum machine views 
Rectangle - used less than you would expect (almost everything are Images), used to implement red and green glow to power button, used to implement LCD displays segments 
Image - used to display PNG images, a lot of alpha channel tricks are used 
MouseArea - used to handle mouse clicks / touches, eg. disk scratching, drum buttons 
Rotation - used to rotate the "arm" on top of the disk 
Flickable - used to implement view change between the info screen, the turn table and the drum machine, also used to switch between 1-16 and 17-32 ticks in drum machine 
Repeater - used to create 32 x 6 drum buttons in drum machine 
NumberAnimation, PropertyAnimation, ColorAnimation, Behavior - used to implement smooth animations 
State - the view change between the info screen, the turn table and the drum machine are triggered by states 
Transition - describes how the state changes should look like